import { ErrorHandler, Injectable, inject } from '@angular/core';
import { LoggerService } from '../../../shared/services/logger.service';

@Injectable()
export class GlobalErrorHandler implements ErrorHandler {
  private logger = inject(LoggerService);

  handleError(error: any): void {
    // Log del error global
    this.logger.error(
      `üö® Global Error: ${error.message || error.toString()}`,
      'GlobalErrorHandler',
      {
        error: error.message || error.toString(),
        stack: error.stack,
        name: error.name,
        url: window.location.href,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString()
      }
    );

    // Informaci√≥n adicional sobre el tipo de error
    if (error.name === 'ChunkLoadError') {
      this.logger.error(
        'üì¶ Error de carga de chunk - Posible actualizaci√≥n de la aplicaci√≥n',
        'GlobalErrorHandler',
        {
          solution: 'Recarga la p√°gina para obtener la √∫ltima versi√≥n',
          error
        }
      );
    } else if (error.message?.includes('Loading chunk')) {
      this.logger.error(
        'üì¶ Error de carga lazy loading',
        'GlobalErrorHandler',
        {
          solution: 'Verifica la conexi√≥n a internet y recarga la p√°gina',
          error
        }
      );
    } else if (error.message?.includes('ResizeObserver')) {
      this.logger.warn(
        'üëÅÔ∏è Warning ResizeObserver (ignorable)',
        'GlobalErrorHandler',
        { error }
      );
    } else if (error.message?.includes('Non-Error promise rejection')) {
      this.logger.warn(
        'üîÑ Promise rejection sin error espec√≠fico',
        'GlobalErrorHandler',
        { error }
      );
    }

    // Log en consola tambi√©n para desarrollo
    console.error('üö® Global Error Caught:', error);
  }
} 